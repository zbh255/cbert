package config

import (
	"encoding/json"
)

type Config interface {
	DecodeConfig([]byte) (*AutoGenerated, error)
	EncodeConfig() ([]byte, error)
}

type UserConfig interface {
	DecodeConfig([]byte) (*UserConf, error)
	EncodeConfig() ([]byte, error)
}

func NewProjectConfig() Config {
	return &AutoGenerated{}
}

func NewUserConfig() UserConfig {
	return &UserConf{}
}

type AutoGenerated struct {
	Source struct {
		Dir        string `json:"dir"`
		UserConfig string `json:"user_config"`
		RequestNum int    `json:"request_num"`
		UserNum    int    `json:"user_num"`
	} `json:"source"`
	Connection struct {
		Addr    string `json:"addr"`
		Timeout int    `json:"timeout"`
	} `json:"connection"`
	Status struct {
		Dest string `json:"dest"`
		Addr string `json:"addr"`
	} `json:"status"`
	Log struct {
		AccessLog string `json:"access_log"`
		ErrorLog  string `json:"error_log"`
	} `json:"log"`
}

type UserConf struct {
	User []string `json:"user"`
}

func (a *AutoGenerated) DecodeConfig(confBytes []byte) (*AutoGenerated, error) {
	err := json.Unmarshal(confBytes, a)
	return a, err
}

// format marshal
func (a *AutoGenerated) EncodeConfig() ([]byte, error) {
	return json.MarshalIndent(a, "\n", "\t")
}

func (u *UserConf) DecodeConfig(confBytes []byte) (*UserConf, error) {
	err := json.Unmarshal(confBytes, u)
	return u, err
}

func (u *UserConf) EncodeConfig() ([]byte, error) {
	return json.MarshalIndent(u, "\n", "\t")
}
